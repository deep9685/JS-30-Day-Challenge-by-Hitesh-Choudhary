To demonstrate how to bundle multiple JavaScript files into a single file using a module bundler, I'll provide instructions for using both Webpack and Parcel.

Using Webpack
1. Initialize Your Project
If you don't have a package.json file yet, create one:

sh
Copy code
npm init -y
2. Install Webpack and Webpack CLI
Install Webpack and its CLI as development dependencies:

sh
Copy code
npm install --save-dev webpack webpack-cli
3. Create Your JavaScript Files
Create a directory structure and add some JavaScript files.

src/index.js (Entry point)

javascript
Copy code
// src/index.js
import { greet } from './greet.js';
import { farewell } from './farewell.js';

console.log(greet('Alice'));
console.log(farewell('Bob'));
src/greet.js

javascript
Copy code
// src/greet.js
export function greet(name) {
    return `Hello, ${name}!`;
}
src/farewell.js

javascript
Copy code
// src/farewell.js
export function farewell(name) {
    return `Goodbye, ${name}!`;
}
4. Create Webpack Configuration
Create a file named webpack.config.js:

javascript
Copy code
// webpack.config.js
const path = require('path');

module.exports = {
    entry: './src/index.js',
    output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist'),
    },
    mode: 'development', // Use 'production' for production builds
};
5. Update package.json Scripts
Add a build script to your package.json:

json
Copy code
"scripts": {
  "build": "webpack"
}
6. Run the Webpack Build
Run the build script to create the bundled file:

sh
Copy code
npm run build
Webpack will generate dist/bundle.js, which is the bundled file containing all your JavaScript code.

Using Parcel
1. Initialize Your Project
If you don't have a package.json file yet, create one:

sh
Copy code
npm init -y
2. Install Parcel
Install Parcel as a development dependency:

sh
Copy code
npm install --save-dev parcel
3. Create Your JavaScript Files
Create the same directory structure and JavaScript files as shown in the Webpack example.

4. Update package.json Scripts
Add a build script to your package.json:

json
Copy code
"scripts": {
  "build": "parcel build src/index.js --out-dir dist --out-file bundle.js"
}
5. Run the Parcel Build
Run the build script to create the bundled file:

sh
Copy code
npm run build
Parcel will generate dist/bundle.js, which is the bundled file containing all your JavaScript code.

Summary
Both Webpack and Parcel bundle multiple JavaScript files into a single file.

Webpack: Requires configuration via webpack.config.js and is highly customizable.
Parcel: Requires minimal configuration and is very easy to use.
Choose the bundler that fits your project's needs. For a simple setup and ease of use, Parcel is a great choice. For more advanced use cases and customizations, Webpack is very powerful.






